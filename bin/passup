#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var spawn = require('child_process').spawn;

// Determine the home directory, configuration file, adapter, init, and binary paths
var homePath = (process.platform.toLowerCase() == 'win32') ? process.env.USERPROFILE : process.env.HOME;
var configExamplePath = path.join(__dirname, '../config.example.json');
var configPath = path.join(homePath, '.passup.json');
var adapterPath = path.join(__dirname, '../adapters');
var initPath = path.join(__dirname, '../init.js');
var binPath = path.join(__dirname, '../node_modules/.bin');

switch (process.argv[2]) {
    // Process command line arguments
    case 'config':
        console.log("Creating initial configuration file at " + configPath);

        // Retrieve the example configuration
        var sourceStream = fs.createReadStream(configExamplePath);
        sourceStream.on('error', function(err) {
            console.log("Error occured on reading the example configuration: " + err);
        });

        // Output the user configuration file
        var targetStream = fs.createWriteStream(configPath);
        targetStream.on('error', function(err) {
            console.log("Error occured on creating the configuration: " + err);
        });
        targetStream.on('close', function(ex) {
            console.log("Changes saved.");
        });
        sourceStream.pipe(targetStream);

        // Open the file for editing
        var textEditor = process.env.VISUAL || process.env.EDITOR || 'nano';
        var args = [textEditor, configPath];
        spawn('/usr/bin/env', args, {
            stdio: 'inherit'
        });
        break;

    case 'update':
        if (!fs.existsSync(adapterPath)) {
            // Clone the adapters repository
            var args = ['git', 'clone', 'https://github.com/alanctkc/passup-adapters.git', adapterPath];
            spawn('/usr/bin/env', args, {
                stdio: 'inherit'
            });
        } else {
            // Update the adapters repository
            var args = ['git', 'pull', 'origin', 'master'];
            spawn('/usr/bin/env', args, {
                stdio: 'inherit',
                cwd: adapterPath
            });
        }
        break;

    default:
        // Check for configuration file
        if (!fs.existsSync(configPath)) {
            // Clone the adapters repository
            console.log("No configuration file found. Use command 'passup config' to generate a default ~/.passup.json.");
            break;
        }

        // Check for adapters
        if (!fs.existsSync(adapterPath)) {
            // Clone the adapters repository
            console.log("No adapters found. Use command 'passup update' to update to the latest adapters.");
            break;
        }

        // Add dependency binaries to environment
        process.env.PATH = binPath + ':' + process.env.PATH;

        // Start passup
        var args = ['casperjs', initPath, '--manifest=' + configPath].concat(process.argv.slice(2));
        spawn('/usr/bin/env', args, {
            stdio: 'inherit',
            cwd: path.join(__dirname, '../'),
            env: process.env
        });
        break;
}
