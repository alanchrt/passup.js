#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var spawn = require('child_process').spawn;
var program = require('commander');
var phantomjs = require('phantomjs');

var paths = {
    home: process.env[(process.platform === 'win32')? 'USERPROFILE' : 'HOME'],
    configExample: path.join(__dirname, '../config.example.json'),
    configInitial: path.join(__dirname, '../config.initial.json'),
    adapters: path.join(__dirname, '../adapters'),
    casperjs: path.join(__dirname, '../node_modules/casperjs/bin'),
    init: path.join(__dirname, '../init.js')
};
paths.config = path.join(paths.home, '.passup.json');

program.version('0.9.0')
    .option('--adapter', "update only the specified adapter(s)")
    .option('--password', "update only the specified password(s)");

program.command('config')
    .description("create initial configuration file in the user home directory")
    .option('-f, --force', "force overwrite of existing user configuration")
    .action(function configCommand(args) {
        if (fs.existsSync(paths.config) && !args.force) {
            console.log("Configuration file already exists. Use 'passup config -f' to overwrite it.");
            return;
        }
        console.log("Creating initial configuration file at " + paths.config);

        // Retrieve the example configuration
        var source = fs.createReadStream(paths.configInitial);
        source.on('error', function(err) {
            console.log("Error occured on reading the example configuration: " + err);
        });
        // Output the user configuration file
        var target = fs.createWriteStream(paths.config);
        target.on('error', function(err) {
            console.log("Error occured on creating the configuration: " + err);
        });
        target.on('close', function(ex) {
            console.log("Changes saved.");
        });
        source.pipe(target);

        // Open the file for editing
        var textEditor = process.env.VISUAL || process.env.EDITOR || 'nano';
        args = [textEditor, paths.config];
        spawn('/usr/bin/env', args, {
            stdio: 'inherit'
        });
    });

program.command('update')
    .description("clones the adapters git repository")
    .action(function updateCommand() {
        var args = [];
        if (!fs.existsSync(paths.adapters)) {
            // Clone the adapters repository
            args = ['git', 'clone', 'https://github.com/alanctkc/passup-adapters.git', paths.adapters];
            spawn('/usr/bin/env', args, {
                stdio: 'inherit'
            });
        } else {
            // Update the adapters repository
            args = ['git', 'pull', 'origin', 'master'];
            spawn('/usr/bin/env', args, {
                stdio: 'inherit',
                cwd: paths.adapters
            });
        }
    });

// Parse the command line arguments
program.parse(process.argv);

// Run passup
var shouldRun = true;
if (program.rawArgs.length > 2) {
    shouldRun = (program.rawArgs[2] != 'config' &&
        program.rawArgs[2] != 'update');
}

if (shouldRun) {
    // Check for configuration file
    if (!fs.existsSync(paths.config)) {
        // Clone the adapters repository
        console.log("No configuration file found. Use command 'passup config' to generate a default ~/.passup.json.");
        process.exit();
    }

    // Check for adapters
    if (!fs.existsSync(paths.adapters)) {
        // Clone the adapters repository
        console.log("No adapters found. Use command 'passup update' to update to the latest adapters.");
        process.exit();
    }

    // Add dependency binaries to environment
    process.env.PATH = paths.casperjs + ':' + path.dirname(phantomjs.path) + ':' + process.env.PATH;
    // Start passup
    var args = ['casperjs', paths.init, '--manifest=' + paths.config].concat(process.argv.slice(2));
    spawn('/usr/bin/env', args, {
        stdio: 'inherit',
        cwd: path.join(__dirname, '../'),
        env: process.env
    });
}